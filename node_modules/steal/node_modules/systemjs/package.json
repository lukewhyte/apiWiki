{
  "name": "systemjs",
  "version": "0.11.1",
  "description": "System loader extension for flexible AMD & CommonJS support",
  "main": "dist/system.src.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/systemjs/systemjs"
  },
  "author": {
    "name": "Guy Bedford"
  },
  "license": "MIT",
  "dependencies": {
    "es6-module-loader": "~0.11.1"
  },
  "devDependencies": {
    "qunit": "^0.6.2",
    "uglify-js": "~2.4.13"
  },
  "scripts": {
    "test": "qunit -c s:./dist/system.js -t ./test/test.js"
  },
  "readme": "SystemJS\n========\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/systemjs/systemjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nUniversal dynamic module loader - loads ES6 modules, AMD, CommonJS and global scripts in the browser and NodeJS.\n\nDesigned as a collection of extensions to the [ES6 module loader](https://github.com/ModuleLoader/es6-module-loader) which can also be applied individually.\n\n* [Loads any module format](https://github.com/systemjs/systemjs/wiki/Module-Format-Support) with [exact circular reference and binding support](https://github.com/ModuleLoader/es6-module-loader/wiki/Circular-References-&-Bindings).\n* Loads [ES6 modules compiled into the `System.register` bundle format for production](https://github.com/systemjs/systemjs/wiki/Production-Workflows), maintaining circular references support.\n* Supports RequireJS-style [map](https://github.com/systemjs/systemjs/wiki/Map-Configuration), [paths](https://github.com/ModuleLoader/es6-module-loader/wiki/Configuring-the-Loader#paths-implementation), [bundles](https://github.com/systemjs/systemjs/wiki/Production-Workflows#bundle-extension) and [global shims](https://github.com/systemjs/systemjs/wiki/Module-Format-Support#globals-global).\n* [Loader plugins](#plugins) allow loading assets through the module naming system such as CSS, JSON or images.\n\nDesigned to work with the [ES6 Module Loader polyfill](https://github.com/ModuleLoader/es6-module-loader) (9KB) for a combined total footprint of 16KB minified and gzipped.\n\nRuns in IE8+ and NodeJS.\n\nFor discussion, [see the Google Group](https://groups.google.com/group/systemjs).\n\nDocumentation\n---\n\n* [Loader Configuration](https://github.com/ModuleLoader/es6-module-loader/wiki/Configuring-the-Loader)\n* [Map Configuration](https://github.com/systemjs/systemjs/wiki/Map-Configuration)\n* [Meta Configuration](https://github.com/systemjs/systemjs/wiki/Meta-Configuration)\n* [Module Format Support](https://github.com/systemjs/systemjs/wiki/Module-Format-Support)\n* [Relative Dynamic Loading](https://github.com/systemjs/systemjs/wiki/Relative-Dynamic-Loading)\n* [Versions Extension](https://github.com/systemjs/systemjs/wiki/Versions-Extension)\n* [Production Workflows](https://github.com/systemjs/systemjs/wiki/Production-Workflows)\n* [Creating Plugins](https://github.com/systemjs/systemjs/wiki/Creating-a-Plugin)\n* [Creating a Custom Module Format](https://github.com/systemjs/systemjs/wiki/Creating-a-Custom-Format-Extension)\n\nGetting Started\n---\n\n### Setup\n\nDownload [`es6-module-loader.js`](https://github.com/ModuleLoader/es6-module-loader/blob/v0.11.0/dist/es6-module-loader.js) and [`traceur.js`](https://raw.githubusercontent.com/jmcriffey/bower-traceur/0.0.79/traceur.js) and locate them in the same folder as `system.js` from this repo.\n\nWe then include `dist/system.js` with a script tag in the page.\n\n`es6-module-loader.js` will then be included from the same folder automatically and [Traceur](https://github.com/google/traceur-compiler) is dynamically included from `traceur.js` when loading an ES6 module only.\n\nAlternatively, `es6-module-loader.js` or `traceur.js` can be included before `system.js` with a script tag in the page.\n\n### Simple Application Structure\n\nThe standard application structure would be something like the following:\n\nindex.html:\n```html\n<script src=\"system.js\"></script>\n<script>\n  // Identical to writing System.baseURL = ...\n  System.config({\n\n    // set all requires to \"lib\" for library code\n    baseURL: '/lib/',\n    \n    // set \"app\" as an exception for our application code\n    paths: {\n      'app/*': '/app/*.js'\n    }\n  });\n\n  System.import('app/app')\n</script>\n```\n\napp/app.js:\n```javascript\n  // relative require for within the package\n  require('./local-dep');    // -> /app/local-dep.js\n\n  // library resource\n  var $ = require('jquery'); // -> /lib/jquery.js\n\n  // format detected automatically\n  console.log('loaded CommonJS');\n```\n\nModule format detection happens in the order System.register, ES6, AMD, then CommonJS and falls back to global modules.\n\nNamed defines are also supported, with the return value for a module containing named defines being its last named define.\n\n> _Note that when running locally, ensure you are running from a local server or a browser with local XHR requests enabled. If not you will get an error message._\n\n> _For Chrome on Mac, you can run it with: `/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --allow-file-access-from-files &> /dev/null &`_\n\n> _In Firefox this requires navigating to `about:config`, entering `security.fileuri.strict_origin_policy` in the filter box and toggling the option to false._\n\n### Loading ES6\n\napp/es6-file.js:\n```javascript\n  export class q {\n    constructor() {\n      this.es6 = 'yay';\n    }\n  }\n```\n\n```html\n  <script>\n    System.import('app/es6-file').then(function(m) {\n      console.log(new m.q().es6); // yay\n    });\n  </script>\n```\n\nES6 modules define named exports, provided as getters on a special immutable `Module` object.\n\nTo build for production, see the [production workflows](https://github.com/systemjs/systemjs/wiki/Production-Workflows).\n\n[For further details about SystemJS module format support, see the wiki page](https://github.com/systemjs/systemjs/wiki/Module-Format-Support).\n\nFor further infomation on ES6 module loading, see the [ES6 Module Loader polyfill documentation](https://github.com/ModuleLoader/es6-module-loader).\n\n### Plugins\n\nPlugins handle alternative loading scenarios, including loading assets such as CSS or images, and providing custom transpilation scenarios.\n\nSupported Plugins:\n\n* [CSS](https://github.com/systemjs/plugin-css) `System.import('my/file.css!')`\n* [Image](https://github.com/systemjs/plugin-image) `System.import('some/image.png!image')`\n* [JSON](https://github.com/systemjs/plugin-json) `System.import('some/data.json!').then(function(json){})`\n* [Text](https://github.com/systemjs/plugin-text) `System.import('some/text.txt!text').then(function(text) {})`\n\nAdditional Community Plugins:\n\n* [JSX](https://github.com/floatdrop/plugin-jsx) `System.import('template.jsx!')`\n* [Markdown](https://github.com/guybedford/plugin-md) `System.import('app/some/project/README.md!').then(function(html) {})`\n* [WebFont](https://github.com/guybedford/plugin-font) `System.import('google Port Lligat Slab, Droid Sans !font')`\n\nAdditional plugin submissions to the above are welcome.\n\n[Read the guide here on creating plugins](https://github.com/systemjs/systemjs/wiki/Creating-a-Plugin).\n\n### NodeJS Usage\n\nTo load modules in NodeJS, install SystemJS with:\n\n```\n  npm install systemjs\n```\n\nWe can then load modules equivalently to in the browser:\n\n```javascript\nvar System = require('systemjs');\n\n// loads './app.js' from the current directory\nSystem.import('./app').then(function(m) {\n  console.log(m);\n});\n```\n\n#### Running the tests\n\nTo install the dependencies correctly, run `bower install` from the root of the repo, then open `test/test.html` in a browser with a local server\nor file access flags enabled.\n\nLicense\n---\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/systemjs/systemjs/issues"
  },
  "homepage": "https://github.com/systemjs/systemjs",
  "_id": "systemjs@0.11.1",
  "_shasum": "f00fd0c071f3bf56535dccbec03919e6d1996ca3",
  "_resolved": "git://github.com/bitovi/systemjs.git#b664e4cd359c013acb3445627d1e1e1799424542",
  "_from": "systemjs@git://github.com/bitovi/systemjs.git#b664e4cd359c013acb3445627d1e1e1799424542"
}
